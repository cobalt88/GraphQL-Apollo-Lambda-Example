import type { HeaderMap, HTTPGraphQLRequest, HTTPGraphQLResponse } from '@apollo/server';
export interface RequestHandler<EventType, ResultType> {
    fromEvent: (event: EventType) => HTTPGraphQLRequest;
    toSuccessResult: (response: HTTPGraphQLResponse) => ResultType;
    toErrorResult: (error: unknown) => ResultType;
}
export type RequestHandlerEvent<T extends RequestHandler<any, any>> = T extends RequestHandler<infer EventType, any> ? EventType : never;
export type RequestHandlerResult<T extends RequestHandler<any, any>> = T extends RequestHandler<any, infer ResultType> ? ResultType : never;
export type EventParser<EventType> = {
    parseHttpMethod: (event: EventType) => string;
    parseQueryParams: (event: EventType) => string;
    parseHeaders: (event: EventType) => HeaderMap;
    parseBody: (event: EventType, headers: HeaderMap) => string;
} | ((event: EventType) => HTTPGraphQLRequest);
export type ResultGenerator<ResultType> = {
    success: (response: HTTPGraphQLResponse) => ResultType;
    error: (error: unknown) => ResultType;
};
export declare function createRequestHandler<EventType, ResultType>(eventParser: EventParser<EventType>, resultGenerator: ResultGenerator<ResultType>): RequestHandler<EventType, ResultType>;
//# sourceMappingURL=_create.d.ts.map