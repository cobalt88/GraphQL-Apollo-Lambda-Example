import type { ApolloServer, BaseContext, ContextFunction } from '@apollo/server';
import type { WithRequired } from '@apollo/utils.withrequired';
import type { Context, Handler } from 'aws-lambda';
import type { MiddlewareFn } from './middleware';
import type { RequestHandler, RequestHandlerEvent, RequestHandlerResult } from './request-handlers/_create';
export interface LambdaContextFunctionArgument<RH extends RequestHandler<any, any>> {
    event: RH extends RequestHandler<infer EventType, any> ? EventType : never;
    context: Context;
}
export interface LambdaHandlerOptions<RH extends RequestHandler<any, any>, TContext extends BaseContext> {
    middleware?: Array<MiddlewareFn<RH>>;
    context?: ContextFunction<[LambdaContextFunctionArgument<RH>], TContext>;
}
export type LambdaHandler<RH extends RequestHandler<any, any>> = Handler<RequestHandlerEvent<RH>, RequestHandlerResult<RH>>;
export declare function startServerAndCreateLambdaHandler<RH extends RequestHandler<any, any>>(server: ApolloServer<BaseContext>, handler: RH, options?: LambdaHandlerOptions<RH, BaseContext>): LambdaHandler<RH>;
export declare function startServerAndCreateLambdaHandler<RH extends RequestHandler<any, any>, TContext extends BaseContext>(server: ApolloServer<TContext>, handler: RH, options: WithRequired<LambdaHandlerOptions<RH, TContext>, 'context'>): LambdaHandler<RH>;
//# sourceMappingURL=lambdaHandler.d.ts.map