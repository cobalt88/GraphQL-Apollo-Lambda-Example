import type { Handler } from 'aws-lambda';
import { ApolloServer as ApolloServerExpress, ExpressContext, GetMiddlewareOptions } from 'apollo-server-express';
import type { GraphQLOptions } from 'apollo-server-core';
import express from 'express';
import { getCurrentInvoke } from '@vendia/serverless-express';
export interface CreateHandlerOptions {
    expressAppFromMiddleware?: (middleware: express.RequestHandler) => express.Application;
    expressGetMiddlewareOptions?: GetMiddlewareOptions;
}
export interface LambdaContextFunctionParams {
    event: ReturnType<typeof getCurrentInvoke>['event'];
    context: ReturnType<typeof getCurrentInvoke>['context'];
    express: ExpressContext;
}
export declare class ApolloServer extends ApolloServerExpress<LambdaContextFunctionParams> {
    protected serverlessFramework(): boolean;
    createHandler<TEvent = any, TResult = any>(options?: CreateHandlerOptions): Handler<TEvent, TResult>;
    createGraphQLServerOptions(req: express.Request, res: express.Response): Promise<GraphQLOptions>;
}
//# sourceMappingURL=ApolloServer.d.ts.map