"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServer = void 0;
const apollo_server_express_1 = require("apollo-server-express");
const express_1 = __importDefault(require("express"));
const serverless_express_1 = __importStar(require("@vendia/serverless-express"));
function defaultExpressAppFromMiddleware(middleware) {
    const app = (0, express_1.default)();
    app.use(middleware);
    return app;
}
class ApolloServer extends apollo_server_express_1.ApolloServer {
    serverlessFramework() {
        return true;
    }
    createHandler(options) {
        let realHandler;
        return async (...args) => {
            var _a;
            await this.ensureStarted();
            if (!realHandler) {
                const middleware = this.getMiddleware({
                    path: '/',
                    ...options === null || options === void 0 ? void 0 : options.expressGetMiddlewareOptions,
                });
                const app = ((_a = options === null || options === void 0 ? void 0 : options.expressAppFromMiddleware) !== null && _a !== void 0 ? _a : defaultExpressAppFromMiddleware)(middleware);
                realHandler = (0, serverless_express_1.default)({ app });
            }
            return (await realHandler(...args));
        };
    }
    async createGraphQLServerOptions(req, res) {
        const { event, context } = (0, serverless_express_1.getCurrentInvoke)();
        const contextParams = {
            event,
            context,
            express: { req, res },
        };
        return super.graphQLServerOptions(contextParams);
    }
}
exports.ApolloServer = ApolloServer;
//# sourceMappingURL=ApolloServer.js.map